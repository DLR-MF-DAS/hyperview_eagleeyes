"""
This code is generated by Ridvan Salih KUZU
LAST EDITED:  20.06.2022
ABOUT SCRIPT:
It defines ClIPDataset class by inheriting torchvision.datasets.ImageFolder
"""

import random
from torchvision.datasets import ImageFolder
import clip
import torch


class ClIPDataset(ImageFolder):
    """
    THIS CLASS MANAGES THE DATA READING AND AUGMENTATION OPERATIONS
    """
    def __init__(self, text_augmented=True, **kwargs):
        super(ClIPDataset, self).__init__(**kwargs)
        self.text_augmented=text_augmented


    def __getitem__(self, index):

        #Image loading is directly managed by super class
        image, label = super(ImageFolder, self).__getitem__(index)

        # Text loading requires some custom augmentations that is why the codes below are added:
        if self.text_augmented:
            augmented_adjectives = ['a simple',
                                   'an interesting',
                                   'a strange',
                                   'a freshly captured',
                                   'a sample',
                                   'an example',
                                   'a new',
                                   'an archive',
                                   'a cover']

            augmented_nouns = ['photo',
                               'frame',
                               'image']

            augmented_location = ['archive',
                                  'newspaper',
                                  'magazine',
                                  'journal',
                                  'webpage',
                                  'wallpaper',
                                  'wall',
                                  'flayer']

            text = "This is {} {} of the {} from the {}".format(random.choice(augmented_adjectives),
                                                                random.choice(augmented_nouns),
                                                                self.classes[label],
                                                                random.choice(augmented_location))

        else:
            text = 'This is a photo of the {}'.format(self.classes[label])

        return image, torch.squeeze(clip.tokenize([text])), label
