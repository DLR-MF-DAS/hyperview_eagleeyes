"""
This code is generated by Ridvan Salih KUZU
LAST EDITED:  20.06.2022
ABOUT SCRIPT:
IT INCLUDES CUSTOM TORCH MODULE CLASSES UTILIZED IN DOWNSTREAM TASKS
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.nn import Parameter
import math


class ArcMarginProduct(nn.Module):
    '''
       THIS FUNCTION IMPLEMENTS LARGE MARGIN ARC DISTANCE:
       Introduced by Deng et al. in ArcFace: Additive Angular Margin Loss for Deep Face Recognition
       :param in_features: size of each input sample
       :param out_features: size of each output sample
       :param s: norm of input feature
       :param m: margin for cos(theta + m)
       :return:
    '''

    def __init__(self, in_features, out_features, s=16.0, m=0.25, easy_margin=False):
        super(ArcMarginProduct, self).__init__()
        self.in_features = in_features
        self.out_features = out_features
        self.s = s
        self.m = m
        self.weight = Parameter(torch.FloatTensor(out_features, in_features))
        nn.init.xavier_uniform_(self.weight)

        self.easy_margin = easy_margin
        self.cos_m = math.cos(m)
        self.sin_m = math.sin(m)
        self.th = math.cos(math.pi - m)
        self.mm = math.sin(math.pi - m) * m
        #self.lf = torch.nn.LogSoftmax().cuda()

    def forward(self, input, label=None):
        # --------------------------- cos(theta) & phi(theta) ---------------------------
        logits = F.linear(F.normalize(input), F.normalize(self.weight))
        if label==None:
            return logits
        sine = torch.sqrt(1.0 - torch.pow(logits, 2))
        phi = logits * self.cos_m - sine * self.sin_m
        if self.easy_margin:
            phi = torch.where(logits > 0, phi, logits)
        else:
            phi = torch.where(logits > self.th, phi, logits - self.mm)

        #one_hot = torch.zeros(logits.size())
        #one_hot.scatter_(1, label.view(-1, 1).long(), 1)

        one_hot = F.one_hot(label, num_classes=logits.shape[-1])
        output = (one_hot * phi) + ((1.0 - one_hot) * logits)  #

        output *= self.s

        return output


class MLPHead(nn.Module):
    '''
        THIS FUNCTION IMPLEMENTS 2-LAYER MLP HEAD MODULE
    '''
    def __init__(self, n_inputs,n_outputs):
        super(MLPHead, self).__init__()

        # First hidden layer
        self.hidden1 = nn.Linear(n_inputs, int(n_inputs/2))
        torch.nn.init.kaiming_uniform_(self.hidden1.weight, nonlinearity='relu')
        self.act1 = nn.ReLU()  # TODO: RELU

        # Second hidden layer
        self.hidden2 = nn.Linear(int(n_inputs/2), n_outputs)
        torch.nn.init.kaiming_uniform_(self.hidden2.weight, nonlinearity='relu')
        self.act2 = nn.Softmax() #TODO SOFTMAX

    def forward(self, X):

        X = self.hidden1(X)
        X = self.act1(X)

        X = self.hidden2(X)
        X = self.act2(X)

        return X


class HyperHead(nn.Module):
    '''
        THIS FUNCTION IMPLEMENTS 2-LAYER MLP HEAD MODULE
    '''
    def __init__(self, n_inputs,n_outputs):
        super(HyperHead, self).__init__()

        # First hidden layer
        self.hidden1 = nn.Linear(n_inputs, int(n_inputs))
        torch.nn.init.kaiming_uniform_(self.hidden1.weight, nonlinearity='relu')
        self.act1 = nn.Hardswish()  # TODO: RELU

        # First hidden layer
        self.hidden2 = nn.Linear(n_inputs, int(n_inputs/2))
        torch.nn.init.kaiming_uniform_(self.hidden2.weight, nonlinearity='relu')
        self.act2 = nn.Hardswish() #TODO: RELU

        # Second hidden layer
        self.hidden3 = nn.Linear(int(n_inputs/2), n_outputs)
        torch.nn.init.kaiming_uniform_(self.hidden3.weight, nonlinearity='relu')
        self.act3 = nn.Hardsigmoid() #TODO SOFTMAX

    def forward(self, X):

        X = self.hidden1(X)
        X = self.act1(X)

        X = self.hidden2(X)
        X = self.act2(X)

        X = self.hidden3(X)
        X = self.act3(X)

        return X


class HyperDimensionReduction(nn.Module):
    '''
        THIS FUNCTION IMPLEMENTS 2-LAYER DIMENSION REDUCTION MODULE
    '''
    def __init__(self):
        super(HyperDimensionReduction, self).__init__()

        # First hidden layer
        self.dim1 = nn.Conv2d(150,64,kernel_size=(1,1))
        torch.nn.init.kaiming_uniform_(self.dim1.weight, nonlinearity='relu')
        self.act1 = nn.Hardswish()  # TODO: RELU

        # First hidden layer
        self.dim2 = nn.Conv2d(64,3,kernel_size=(1,1))
        torch.nn.init.kaiming_uniform_(self.dim2.weight, nonlinearity='relu')
        self.act2 = nn.Hardswish() #TODO: RELU



    def forward(self, X):

        #X=X.permute(0, 3, 1, 2)
        X = self.dim1(X)
        X = self.act1(X)

        X = self.dim2(X)
        X = self.act2(X)#

        return X